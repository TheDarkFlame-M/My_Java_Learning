/**
 * 原码、反码、补码详解 - 韩顺平老师精华总结
 * 
 * 核心规则：
 * 1. 二进制的最高位是符号位：0表示正数，1表示负数（口诀：0->0 1->-）
 * 2. 正数的原码、反码、补码都一样（三码合一）
 * 3. 负数的反码 = 它的原码符号位不变，其它位取反（0->1, 1->0）
 * 4. 负数的补码 = 它的反码 + 1
 * 5. 负数的反码 = 负数的补码 - 1
 * 6. 0的反码、补码都是0
 * 7. Java没有无符号数，所有数都是有符号的
 * 8. 在计算机运算时，都是以补码的方式来运算的
 * 9. 当我们看运算结果时，要看它的原码（重点）
 * 
 * 示例分析：
 * 1. 正数 +1：
 *   原码：00000000 00000000 00000000 00000001
 *   反码：00000000 00000000 00000000 00000001  
 *   补码：00000000 00000000 00000000 00000001
 * 
 * 2. 负数 -1：
 *   原码：10000000 00000000 00000000 00000001
 *   反码：11111111 11111111 11111111 11111110（符号位不变，其他取反）
 *   补码：11111111 11111111 11111111 11111111（反码 + 1）
 * 
 * 3. 计算机运算示例：2 + (-3)
 *   2的补码：00000000 00000000 00000000 00000010
 *   -3的补码：11111111 11111111 11111111 11111101
 *   相加结果：11111111 11111111 11111111 11111111（补码）
 *   转原码：10000000 00000000 00000000 00000001 -> -1
 */
public class BinaryNotes {
    public static void main(String[] args) {
        // 验证补码运算
        System.out.println("2 + (-3) = " + (2 + (-3))); // 输出-1

        // 查看二进制表示
        System.out.println("2的二进制：" + Integer.toBinaryString(2));
        System.out.println("-3的二进制(补码)：" + Integer.toBinaryString(-3));
        System.out.println("-1的二进制(补码)：" + Integer.toBinaryString(-1));

        // 位运算验证
        System.out.println("~1（按位取反）：" + ~1); // 输出-2
        System.out.println("~1的二进制：" + Integer.toBinaryString(~1));
    }
}